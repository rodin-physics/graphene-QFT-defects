include("../pristine/graphene_types.jl")
using Cubature
using Interpolations

# Import the data
radial_orb = readdlm("src/orbital_integration/radial_orbital.dat")
rs_DFT = pushfirst!(float.(radial_orb[2:end, 1]), 0)
orb_2p_radial_DFT = pushfirst!(float.(radial_orb[2:end, 2]), 0)
orb_2s_radial_DFT = pushfirst!(float.(radial_orb[2:end, 3]), 0)
orb_1s_radial_DFT = pushfirst!(float.(radial_orb[2:end, 4]), 0)

# Interpolate the data
orb_2p_radial = LinearInterpolation(rs_DFT, orb_2p_radial_DFT)
orb_2s_radial = LinearInterpolation(rs_DFT, orb_2s_radial_DFT)
orb_1s_radial = LinearInterpolation(rs_DFT, orb_1s_radial_DFT)

# 2pz orbital function in spherical coordinates. r is measured from the center
# of the orbital. The wave function does not depend on ϕ, as expected for pz.
@inline function Ψ_pz(r::Float64, θ::Float64)
    if r == 0.0 || r > 40
        return 0.0
    else
        # Spherical harmonic for 2pz (n=2, l=1, m=0): cos(theta)
        # Note that the DFT values for the radial portion are r R(r)
        # so we divide by an extra factor of r when computing the WF
        return (orb_2p_radial(r) * cos(θ) / r * √(3 / (4 * π)))
    end
end

# Coulomb potential generated by a pz orbital at distance R and polar angle τ
# from the center of the orbital.
# The cubature uses spherical coordinates with x[1] = r, x[2] = θ, x[3] = ϕ
function coulomb_potential_pz(R, τ)
    res = hcubature(
        r ->
            Ψ_pz(r[1], r[2]) .^ 2 * r[1]^2 * sin(r[2]) ./ (√(
                r[1]^2 + R^2 -
                2 *
                r[1] *
                R *
                (cos(τ) * cos(r[2]) + cos(r[3]) * sin(τ) * sin(r[2])),
            )),
        [0, 0, 0],
        [40, π, 2 * π],
        reltol = 1e-4,
    )
end
